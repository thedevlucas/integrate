<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Usuario - Panel de Administración</title>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="<%= getFile('admin/css/admin.css') %>">
    <style>
        .document-preview {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: var(--light-gray);
            border-radius: var(--border-radius-md);
        }

        .document-preview h3 {
            margin-bottom: 1rem;
            font-size: 1.1rem;
            color: var(--text-color);
        }

        .documents-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .document-card {
            background: white;
            padding: 1rem;
            border-radius: var(--border-radius-sm);
            box-shadow: var(--shadow-sm);
        }

        .document-card h4 {
            margin-bottom: 1rem;
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .document-image {
            width: 100%;
            height: 200px;
            border-radius: var(--border-radius-sm);
            overflow: hidden;
        }

        .document-image img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .document-actions {
            margin-top: 1rem;
            display: flex;
            gap: 0.5rem;
        }

        .document-actions a {
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius-sm);
            font-size: 0.9rem;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all var(--transition-normal);
        }

        .view-doc {
            background-color: var(--light-gray);
            color: var(--text-color);
        }

        .view-doc:hover {
            background-color: var(--medium-gray);
        }

        .checkbox-wrapper {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .checkbox-wrapper input[type="checkbox"] {
            width: 18px;
            height: 18px;
        }

        .checkbox-wrapper label {
            font-size: 0.9rem;
            color: var(--text-color);
        }

        .checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 0.5rem;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <%- include('partials/sidebar') %>

        <main class="admin-main">
            <%- include('partials/topbar') %>

            <div class="admin-content">
                <div class="page-header">
                    <h1>Editar Usuario</h1>
                    <div class="header-actions">
                        <button class="secondary-button" onclick="history.back()">
                            <i class='bx bx-arrow-back'></i>
                            Volver
                        </button>
                        <button class="primary-button" type="submit" form="editUserForm">
                            <i class='bx bx-save'></i>
                            Guardar Cambios
                        </button>
                    </div>
                </div>

                <div class="edit-form-container">
                    <form id="editUserForm" class="admin-form" onsubmit="handleSubmit(event)">
                        <div class="form-grid">
                            <div class="form-section">
                                <h2>Información Personal</h2>
                                
                                <div class="form-group">
                                    <label for="fullname">Nombre Completo</label>
                                    <input type="text" id="fullname" name="fullname" value="<%= user.fullname %>" required>
                                </div>

                                <div class="form-group">
                                    <label for="email">Correo Electrónico</label>
                                    <input type="email" id="email" name="email" value="<%= user.email %>" required>
                                </div>

                                <div class="form-group">
                                    <label for="phone">Teléfono</label>
                                    <input type="tel" id="phone" name="phone" value="<%= user.phone || '' %>">
                                </div>

                                <div class="form-group">
                                    <label for="category_id">Categoría Profesional</label>
                                    <select id="category_id" name="category_id">
                                        <option value="">Seleccionar categoría</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="orientation_id">Orientación</label>
                                    <select id="orientation_id" name="orientation_id">
                                        <option value="">Seleccionar orientación</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="location_id">Ubicación</label>
                                    <select id="location_id" name="location_id">
                                        <option value="">Seleccionar ubicación</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-section">
                                <h2>Configuración de Cuenta</h2>

                                <div class="form-group">
                                    <label for="status">Estado</label>
                                    <select id="status" name="status" required>
                                        <option value="active" <%= user.status === 'active' ? 'selected' : '' %>>Activo</option>
                                        <option value="pending" <%= user.status === 'pending' ? 'selected' : '' %>>Pendiente</option>
                                        <option value="inactive" <%= user.status === 'inactive' ? 'selected' : '' %>>Inactivo</option>
                                    </select>
                                </div>

                                <div class="checkbox-wrapper">
                                    <input type="checkbox" id="recommended" name="recommended" value="1" <%= user.recommended ? 'checked' : '' %>>
                                    <label for="recommended">Usuario Recomendado</label>
                                </div>

                                <div class="form-group">
                                    <label for="new_password">Nueva Contraseña</label>
                                    <div class="password-input">
                                        <input type="password" id="new_password" name="new_password" placeholder="Dejar en blanco para mantener la actual">
                                        <button type="button" class="toggle-password" onclick="togglePassword('new_password')">
                                            <i class='bx bx-show'></i>
                                        </button>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="confirm_password">Confirmar Contraseña</label>
                                    <div class="password-input">
                                        <input type="password" id="confirm_password" name="confirm_password" placeholder="Confirmar nueva contraseña">
                                        <button type="button" class="toggle-password" onclick="togglePassword('confirm_password')">
                                            <i class='bx bx-show'></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="settings-section">
                            <h2>Filtros Adicionales</h2>
                            <div id="userFilters">
                                <!-- Dynamic filters will be loaded here -->
                            </div>
                        </div>

                        <% if (user.university_degree || user.transfer_ticket) { %>
                            <div class="document-preview">
                                <h3>Documentos del Usuario</h3>
                                <div class="documents-grid">
                                    <% if (user.university_degree) { %>
                                        <div class="document-card">
                                            <h4>Título Universitario</h4>
                                            <div class="document-image">
                                                <img src="/uploads/<%= user.university_degree %>" alt="Título Universitario">
                                            </div>
                                            <div class="document-actions">
                                                <a href="/uploads/<%= user.university_degree %>" target="_blank" class="view-doc">
                                                    <i class='bx bx-fullscreen'></i>
                                                    Ver Completo
                                                </a>
                                            </div>
                                        </div>
                                    <% } %>

                                    <% if (user.transfer_ticket) { %>
                                        <div class="document-card">
                                            <h4>Comprobante de Pago</h4>
                                            <div class="document-image">
                                                <img src="/uploads/<%= user.transfer_ticket %>" alt="Comprobante de Pago">
                                            </div>
                                            <div class="document-actions">
                                                <a href="/uploads/<%= user.transfer_ticket %>" target="_blank" class="view-doc">
                                                    <i class='bx bx-fullscreen'></i>
                                                    Ver Completo
                                                </a>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>

                        <div class="form-section danger-zone">
                            <h2>Zona de Peligro</h2>
                            <p>Las siguientes acciones son irreversibles. Por favor, proceda con precaución.</p>
                            
                            <div class="danger-actions">
                                <button type="button" class="danger-button" onclick="confirmDelete()">
                                    <i class='bx bx-trash'></i>
                                    Eliminar Usuario
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>

    <script>
        // Load categories and locations when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/api/settings/options');
                const data = await response.json();
                
                const categorySelect = document.getElementById('category_id');
                const locationSelect = document.getElementById('location_id');
                const orientationSelect = document.getElementById('orientation_id');

                // Get preselected values from server
                const userCategoryId = <%= user.category_id || 'null' %>;
                const userOrientationId = <%= user.orientation_id || 'null' %>;
                const userLocationId = <%= user.location_id || 'null' %>;
                const userData = <%- JSON.stringify(user || {}) %>;

                // Populate categories
                data.categories.forEach(category => {
                    const option = new Option(category.name, category.id);
                    if (category.id === userCategoryId) {
                        option.selected = true;
                    }
                    categorySelect.appendChild(option);
                });

                // Populate orientations
                data.orientations.forEach(orientation => {
                    const option = new Option(orientation.name, orientation.id);
                    if (orientation.id === userOrientationId) {
                        option.selected = true;
                    }
                    orientationSelect.appendChild(option);
                });

                // Populate locations
                data.locations.forEach(location => {
                    const option = new Option(location.name, location.id);
                    if (location.id === userLocationId) {
                        option.selected = true;
                    }
                    locationSelect.appendChild(option);
                });

                // Load user filters
                await loadUserFilters();

            } catch (error) {
                console.error('Error loading options:', error);
            }
        });

        async function loadUserFilters() {
            try {
                const response = await fetch('/api/admin/filter-categories');
                const categories = await response.json();
                const userData = <%- JSON.stringify(user || {}) %>;
                
                const filtersContainer = document.getElementById('userFilters');
                filtersContainer.innerHTML = ''; // Clear existing content
                
                for (const category of categories) {
                    const optionsResponse = await fetch(`/api/admin/filter-categories/${category.id}/options`);
                    const options = await optionsResponse.json();
                    
                    const filterGroup = document.createElement('div');
                    filterGroup.className = 'form-group';
                    filterGroup.innerHTML = `
                        <label>${category.name}</label>
                        <div class="checkbox-group">
                            ${options.map(option => `
                                <label class="checkbox-label">
                                    <input type="checkbox" 
                                           name="filter_${category.id}_${option.id}" 
                                           value="true"
                                           ${userData.filters && userData.filters[category.id]?.includes(option.id) ? 'checked' : ''}>
                                    ${option.name}
                                </label>
                            `).join('')}
                        </div>
                    `;
                    
                    filtersContainer.appendChild(filterGroup);
                }
            } catch (error) {
                console.error('Error loading user filters:', error);
            }
        }

        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const button = input.nextElementSibling;
            const icon = button.querySelector('i');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('bx-show');
                icon.classList.add('bx-hide');
            } else {
                input.type = 'password';
                icon.classList.remove('bx-hide');
                icon.classList.add('bx-show');
            }
        }

        async function handleSubmit(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            // Add filters to formData
            const filters = {};
            document.querySelectorAll('[name^="filter_"]').forEach(checkbox => {
                if (checkbox.checked) {
                    const [_, categoryId, optionId] = checkbox.name.split('_');
                    if (!filters[categoryId]) {
                        filters[categoryId] = [];
                    }
                    filters[categoryId].push(optionId);
                }
            });
            
            formData.append('filters', JSON.stringify(filters));
            
            try {
                const password = formData.get('new_password');
                const confirmPassword = formData.get('confirm_password');

                if (password && password !== confirmPassword) {
                    throw new Error('Las contraseñas no coinciden');
                }

                // Add recommended value (0 if unchecked)
                if (!formData.get('recommended')) {
                    formData.append('recommended', '0');
                }

                const response = await fetch('/api/users/<%= user.id %>/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Object.fromEntries(formData))
                });

                if (!response.ok) {
                    const data = await response.json();
                    throw new Error(data.error || 'Error al actualizar el usuario');
                }

                alert('Usuario actualizado correctamente');
                window.location.href = '/control/users';
            } catch (error) {
                alert(error.message);
            }
        }

        async function confirmDelete() {
            if (confirm('¿Estás seguro de que deseas eliminar este usuario? Esta acción no se puede deshacer.')) {
                try {
                    const response = await fetch('/api/users/<%= user.id %>', {
                        method: 'DELETE'
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.error || 'Error al eliminar el usuario');
                    }

                    alert('Usuario eliminado correctamente');
                    window.location.href = '/control/users';
                } catch (error) {
                    alert(error.message);
                }
            }
        }
    </script>

    <script src="<%= getFile('admin/js/admin.js') %>"></script>
</body>
</html>